---
# tasks file for ansible-role-oracle-oem-agent-deploy
# 1. Check if oraoem user exists - done
# 2. If not, create - done
# 3. Create base directories (owner oraoem, group dba) - done
# 4. Check if agent install file exists - done
# 5. If not, ask user to download --- - done
# 6. copy pkg to remote and - done
# 7. unzip install media - done
# 8. install oem agent - done
# 9. Execute root.sh - done

- name: "Check if oem agent install file exists"
  ansible.builtin.stat:
    path: "{{ oem_agent_media_dir }}/{{ oem_agent_media }}"
  register: stat_oem_media
  changed_when: false
  delegate_to: "{{ central_server }}"
  run_once: yes

- name: "Report Path"
  debug:
    msg: |
      "{{ oem_agent_media_dir }}/{{ oem_agent_media }}"
  delegate_to: "{{ central_server }}"
  run_once: yes

- name: "Report stats"
  debug:
    msg: |
      "{{ stat_oem_media.stat }}"
  delegate_to: "{{ central_server }}"
  run_once: yes

- name: "OEM Agent install file missing"
  fail:
    msg: "Agent install file missing, prepare by executing emcli get_agentimage on OMS server"
  when: stat_oem_media.stat.exists != True
  delegate_to: "{{ central_server }}"
  run_once: yes

- name: "Opening tcp port"
  firewalld:
    port: "{{ agent_port }}/tcp"
    permanent: yes
    state: enabled
  become: yes
  become_user: root
  when:
    - ansible_facts['distribution_major_version'] == "7"
  ignore_errors: True

- name: "Opening udp port"
  firewalld:
    port: "{{ agent_port }}/udp"
    permanent: yes
    state: enabled
  become: yes
  become_user: root
  when:
    - ansible_facts['distribution_major_version'] == "7"
  ignore_errors: True

- name: "Creating oem_user_group"
  group: 
    name: "{{ oem_user_group }}"
    state: present

- name: "Add local OEM service account, if not exists"
  user:
    name: "{{ oem_user }}"
    comment: OEM Monitoring User
    groups: oraoem,oinstall,dba
    append: yes
#    local: yes
  become: yes
  become_user: root
#  ignore_errors: True

- name: "Adding groups - workaround to be removed"
  shell: |
    usermod -g oinstall oraoem
    usermod -aG {{ oem_user_group }},{{ oem_user }},dba {{ oem_user }}
  become: yes
  become_user: root

- name: "Creating base directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ oem_user }}"
#    group: "{{ oem_user_group }}"
  become: yes
  become_user: root
  with_items:
    - "{{ oemagent_base }}"
    - "{{ oemagent_base }}/logs"
#    - "{{ oem_temp_dir }}"

- name: "Creating temp dir"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ oem_user }}"
    group: "{{ oem_user_group }}"
  become: yes
  become_user: "{{ oem_user }}"
  with_items:
    - "{{ oem_temp_dir }}"

# - name: "Copy OEM agent install file to managed node"
#   copy:
#     src: "{{ oem_agent_media_dir }}/{{ oem_agent_media }}"
#     dest: "/tmp/ansible_emagent"
#     owner: "{{ oem_user }}"
#     group: "{{ oem_user_group }}"
#     mode: u=rwx,g=rw,o=r

- name: "Unarchive OEM install package"
  unarchive:
    src: "{{ oem_agent_media_dir }}/{{ oem_agent_media }}"
    dest: "{{ oem_temp_dir }}/"
    owner: "{{ oem_user }}"
    group: "{{ oem_user_group }}"
#    mode: u=rwx,g=rwx,o=r

- name: "Installing OEM Agent"
  become: yes
  become_user: "{{ oem_user }}"
  shell: |
    {{ oem_temp_dir }}/agentDeploy.sh \
    AGENT_BASE_DIR={{ oemagent_base }} -force -ignorePrereqs \
    AGENT_PORT={{ agent_port }} EM_UPLOAD_PORT={{ agent_upload_port }} \
    OMS_HOST={{ oms_host }} AGENT_INSTANCE_HOME={{ oemagent_base }}/agent/agent_inst \
    AGENT_REGISTRATION_PASSWORD={{ oem_reg_passwd }} SCRATCHPATH={{ oemagent_base }}/logs
  register: oem_install

- name: "Changing root script permission"
  become: yes
  become_user: "{{ oem_user }}"
  shell: |
    chmod 777 {{ oemagent_base }}/agent_{{ oem_agent_version }}/root.sh

- name: "Executing root.sh"
  become: yes
  become_user: root
  shell: | 
    {{ oemagent_base }}/agent_{{ oem_agent_version }}/root.sh
  register: rootsh_result

- name: "Get root.sh Details"
  debug:
    msg: |
      "{{ rootsh_result.stdout }}"

- name: "Reverting root script permission"
  become: yes
  become_user: "{{ oem_user }}"
  shell: |
    chmod 700 {{ oemagent_base }}/agent_{{ oem_agent_version }}/root.sh

- name: "Removing temp dir"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  become: yes
  become_user: "{{ oem_user }}"
  with_items:
    - "{{ oem_temp_dir }}"
